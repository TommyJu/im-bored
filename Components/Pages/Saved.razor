@page "/saved"
@using System.Security.Claims
@using im_bored.Models
@using im_bored.Services
@rendermode InteractiveServer
@inject ActivityService ActivityService
@inject AuthenticationStateProvider AuthProvider

<PageTitle>Saved Activities</PageTitle>

<h2 class="text-center mt-4">📚 Your Saved Activities</h2>

@if (!isAuthenticated)
{
    <div class="alert alert-warning mt-3 text-center">
        You must be logged in to view saved activities.
    </div>
}
else if (savedActivities == null)
{
    <div class="text-center mt-4">
        <div class="spinner-border text-primary" role="status"></div>
    </div>
}
else if (!savedActivities.Any())
{
    <div class="alert alert-info mt-3 text-center">You haven’t saved any activities yet!</div>
}
else
{
    <div class="accordion mt-4 w-100" id="savedActivitiesAccordion" style="max-width: 800px; margin: auto;">
        @for (int i = 0; i < savedActivities.Count; i++)
        {
            var a = savedActivities[i];
            <div class="accordion-item">
                <h2 class="accordion-header" id="heading-@i">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#collapse-@i" aria-expanded="false" aria-controls="collapse-@i">
                        @a.Title
                    </button>
                </h2>
                <div id="collapse-@i" class="accordion-collapse collapse" aria-labelledby="heading-@i"
                    data-bs-parent="#savedActivitiesAccordion">
                    <div class="accordion-body bg-white shadow-sm rounded">
                        <p><strong>Type:</strong> @a.Type</p>
                        <p><strong>Participants:</strong> @a.Participants</p>
                        <p><strong>Price:</strong> @a.Price</p>
                        <p><strong>Duration:</strong> @a.ActivityDuration</p>
                        <p><strong>Kid Friendly:</strong> @(a.kidFriendly ? "Yes" : "No")</p>
                    </div>
                </div>
            </div>
        }
    </div>

}

@code {
    private List<Activity>? savedActivities;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            savedActivities = await ActivityService.GetSavedActivitiesAsync(user);
        }
    }
}
